{"Animating-a-double-pendulum":{"slug":"Animating-a-double-pendulum","filePath":"Animating a double pendulum.md","title":"Animating a double pendulum","links":[],"tags":["Math","Programming","Simulation"],"content":"Physics of double pendulums\nSimulating a double pendulum involves solving its equations of motion, which are derived from Lagrangian mechanics. These equations form a system of nonlinear second-order ordinary differential equations (ODEs).\nDifferential equations\nThe double pendulum system consists of two point masses m_1​ and m_2​, attached by rigid massless rods of lengths l_1​ and l_2​, swinging under gravity. Let \\theta_1​ and \\theta_2​ be the angles each pendulum makes, measured from the vertical.\n\\begin{aligned}\n\\ddot{\\theta}_1 &amp;= \\frac{\n  -g (2m_1 + m_2) \\sin\\theta_1 - m_2 g \\sin(\\theta_1 - 2\\theta_2)\n  - 2 \\sin(\\theta_1 - \\theta_2) m_2\n  \\left( \\dot{\\theta}_2^2 l_2 + \\dot{\\theta}_1^2 l_1 \\cos(\\theta_1 - \\theta_2) \\right)\n}{\n  l_1 \\left( 2m_1 + m_2 - m_2 \\cos(2\\theta_1 - 2\\theta_2) \\right)\n} \\\\[1em]\n\\ddot{\\theta}_2 &amp;= \\frac{\n  2 \\sin(\\theta_1 - \\theta_2)\n  \\left( \\dot{\\theta}_1^2 l_1 (m_1 + m_2) + g (m_1 + m_2) \\cos\\theta_1\n  + \\dot{\\theta}_2^2 l_2 m_2 \\cos(\\theta_1 - \\theta_2) \\right)\n}{\n  l_2 \\left( 2m_1 + m_2 - m_2 \\cos(2\\theta_1 - 2\\theta_2) \\right)\n}\n\\end{aligned}\nSince analytical solutions aren’t known, we use numerical methods to approximate the pendulum’s motion.\nNumerical Integration of ODEs\nTo simulate physical systems we compute the system’s state at each step using estimates of its derivatives.\nRunge-Kutta\nThe Runge-Kutta methods are a family of iterative techniques for integrating ODEs. The most commonly used is the 4th-order Runge-Kutta (RK4) method. RK4 improves upon simpler methods like Euler’s by sampling the derivative multiple times at each step.\nImplementation in C++\nHere are the differential equations, expressed in c++:\ntypedef std::vector&lt;double&gt; State;  \n  \n// ########### Derivatives function for RK4 ###########  \nState derivatives(const State&amp; y) {  \n    const double theta1 = y[0];  \n    const double theta2 = y[1];  \n    const double omega1 = y[2];  \n    const double omega2 = y[3];  \n  \n    const double delta = theta2 - theta1;  \n  \n    const double den1 = (m1 + m2) * l1 - m2 * l1 * std::cos(delta) * std::cos(delta);  \n    const double den2 = (l2 / l1) * den1;  \n  \n    double domega1 = (  \n        m2 * l1 * omega1 * omega1 * std::sin(delta) * std::cos(delta) +  \n        m2 * g * std::sin(theta2) * std::cos(delta) +  \n        m2 * l2 * omega2 * omega2 * std::sin(delta) -  \n        (m1 + m2) * g * std::sin(theta1)  \n    ) / den1;  \n  \n    double domega2 = (  \n        -m2 * l2 * omega2 * omega2 * std::sin(delta) * std::cos(delta) +  \n        (m1 + m2) * (  \n            g * std::sin(theta1) * std::cos(delta) -  \n            l1 * omega1 * omega1 * std::sin(delta) -  \n            g * std::sin(theta2)  \n        )  \n    ) / den2;  \n  \n    return { omega1, omega2, domega1, domega2 };  \n}\nIn the full implementation, we perform one step per frame.\n// ########### RK4 integrator step ###########  \nState rk4_step(const State&amp; y, double dt) {  \n    const State k1 = derivatives(y);  \n    State y_temp(4);  \n  \n    for (int i = 0; i &lt; 4; ++i) y_temp[i] = y[i] + 0.5 * dt * k1[i];  \n    const State k2 = derivatives(y_temp);  \n  \n    for (int i = 0; i &lt; 4; ++i) y_temp[i] = y[i] + 0.5 * dt * k2[i];  \n    const State k3 = derivatives(y_temp);  \n  \n    for (int i = 0; i &lt; 4; ++i) y_temp[i] = y[i] + dt * k3[i];  \n    const State k4 = derivatives(y_temp);  \n  \n    State y_next(4);  \n    for (int i = 0; i &lt; 4; ++i)  \n        y_next[i] = y[i] + dt / 6.0 * (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]);  \n  \n    return y_next;  \n}\nResult\n"},"Hello-World":{"slug":"Hello-World","filePath":"Hello World.md","title":"Hello World","links":[],"tags":[],"content":"My Intentions\nDuring my Studies at University, at my Job as a Programmer, or during personal projects, I often come across topics / problems / solutions worth sharing. I intend to publish short, self-contained posts here.\nPotential Topics\nBlog-posts will fall into 2 categories: mathematics or computer science. In the foreseeable future, the won’t be philosophical or cultural posts, although I don’t want to close this possibility off entirely."},"How-to-setup-a-blog-for-free":{"slug":"How-to-setup-a-blog-for-free","filePath":"How to setup a blog for free.md","title":"How to setup a blog for free","links":[],"tags":["Technology","Obsidian"],"content":"Introduction\nThis is how I set up this Blog, free of charge. All you need is a markdown editor, in my case Obsidian, and a Github account. We’ll be able to edit the blog in markdown locally, and then create a static web page on Github Pages. You can keep your other notes seperated from the blog, we will only publish the &lt;Vault&gt;/Blog folder. We’ll automate the publishing stage with a CI/CD pipeline and an Obsidian plugin. You’ll be able to publish just by pressing a hotkey in Obsidian!\nTechnologies\nBesides Obsidian and Github Pages, a static site generator is used to create the HTML sources. We will use Quartz 4, which comes pre-configured with useful features, like an RSS-feed and a sitemap.\nSetup Quartz\nWe will clone the current Quartz repository into our vault. This allows for customization of components and plugins. If you want to use a submodule, keep in mind to use --depth=2 later when cloning the repo. Otherwise just delete the nested .git folder. (Do not delete your main Git folder.)\nWe will clone Quartz into the folder .github/quartz.\nmkdir .github &amp;&amp; cd .github\ngit clone github.com/jackyzha0/Quartz.git\ncd quartz\nnpm i\nnpx quartz create\nIn .github/Quartz/Quartz.config.ts, you should definitely change the fields\n\npageTitle\nbaseUrl\n\nFor further customization, refer to the documentation.\nSetup Github Pages\nWe will host the website in a separate Github repository for security-reasons. Create this repository, and then create an access token, so we can publish from the main repository. Upload the token as a secret in the main repository, that we can use in the pipeline later. There it’s safely stored. You will need to create a new token, if you decide to create a new pipeline however. Go to Settings &gt; Secrets &gt; Actions and add the secret under the PAGES_DEPLOY_TOKEN. Lastly, enable Github Pages in the hosting-repository under Settings &gt; Pages.\n\nWe can create the main CI/CD pipeline now. Github Actions Pipelines are stored in .github/workflows.\nname: Build and Deploy Quartz to External Pages Repo\n \non:\n  push:\n    branches: [ &quot;*&quot; ]\n \njobs:\n  build:\n    runs-on: ubuntu-latest\n \n    steps:\n      - name: Checkout main repo\n        uses: actions/checkout@v4\n \n      - name: Setup Node.js 22\n        uses: actions/setup-node@v4\n        with:\n          node-version: 22\n \n      - name: Replace Quartz content with Blog folder\n        run: |\n          rm -rf .github/quartz/content/*\n          mkdir -p quartz/content\n          rsync -av --delete Blog/ .github/quartz/content/\n \n      - name: Install dependencies\n        working-directory: .github/quartz\n        run: npm install\n \n      - name: Build Quartz site\n        working-directory: .github/quartz\n        run: npx Quartz build\n \n      - name: Push to pages repo\n        run: |\n          ls\n          cd .github/quartz/public\n          git init\n          git config user.name &quot;github-actions[bot]&quot;\n          git config user.email &quot;github-actions[bot]@users.noreply.github.com&quot;\n          git remote add origin https://x-access-token:${{ secrets.PAGES_DEPLOY_TOKEN }}@github.com/fabsch225/fabsch225.github.io.git\n          git checkout -b main\n          git add .\n          git commit -m &quot;Deploy Quartz site&quot;\n          git push -f origin main\n \nImprovements to the setup\nGit-integration for Obsidian (desktop)\nTo easily push the blog from the Obsidian user interface, we can configure a plugin for Obsidian. This is not absolutely necessary, but speeds up your workflow. Also, this will serve as a practical back-up solution for your whole Vault.\nDisclaimer. Git needs to be installed on your machine, so this is only relevant for PC and Mac.\n\nObsidian plugins live in your vault, specifically in the .obsidian folder. We’ll just create it there. Once we start using git, version control for our custom setup comes for free.\nWe require the following folder-structure:\n.Obsidian/\n└── plugins/\n    └── git-automation/\n        ├── main.js\n        └── manifest.json\nmanifest.json will tell Obsidian the plugin metadata:\n{\n\t&quot;id&quot;: &quot;git-auto-push&quot;,\n\t&quot;name&quot;: &quot;Git Auto Push&quot;,\n\t&quot;version&quot;: &quot;1.0.0&quot;,\n\t&quot;minAppVersion&quot;: &quot;0.12.0&quot;,\n\t&quot;description&quot;: &quot;Automatically add, commit, and push your vault&quot;,\n\t&quot;author&quot;: &quot;Fabian Schuller&quot;,\n\t&quot;authorUrl&quot;: &quot;github.com/fabsch225&quot;,\n\t&quot;main&quot;: &quot;main.js&quot;\n}\nIn main.js, we configure the Obsidian-command, that will trigger the publishing process, and start a node child-process, that executes the git commands.\nconst { Plugin, Notice } = require(&#039;obsidian&#039;);\nconst { exec } = require(&#039;child_process&#039;);\n \nmodule.exports = class GitAutoPushPlugin extends Plugin {\n\tasync onload() {\n\t\tthis.addCommand({\n\t\t\tid: &#039;git-auto-commit-push&#039;,\n\t\t\tname: &#039;Git Add, Commit (Date), and Push&#039;,\n\t\t\tcallback: () =&gt; this.runGitCommands()\n\t\t});\n\t}\n \n\tasync runGitCommands() {\n\t\tconst vaultPath = this.app.vault.adapter.getBasePath();\n\t\tconst date = new Date().toISOString().split(&#039;T&#039;)[0];\n \n\t\tconst command = `\n\t\t\tcd &quot;${vaultPath}&quot; &amp;&amp; \\\n\t\t\tgit add . &amp;&amp; \\\n\t\t\tgit commit -m &quot;${date}&quot; &amp;&amp; \\\n\t\t\tgit push\n\t\t`;\n \n\t\texec(command, (error, stdout, stderr) =&gt; {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(&#039;Git command error:&#039;, error);\n\t\t\t\tnew Notice(&#039;Git push failed: &#039; + error.message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (stderr) console.warn(&#039;Git stderr:&#039;, stderr);\n\t\t\tnew Notice(&#039;Git commit and push successful!&#039;);\n\t\t});\n\t}\n}\n \nNow, reload the plugins in the Obsidian app, and enable our custom plugin. Then press CTRL+P to open the command-prompt and search for the command Automatically add, commit, and push your vault. In the plugin’s settings, you can also bind a hotkey to this command, if you so wish.\nStrip link prefixes\nIf you made it this far, you will notice that the Links between pages are broken. They each have the prefix Blog/, because it’s like this in your main Obsidian Vault. For this, i propose a custom Quartz plugin. We will create a plugin, that transforms the links, so the Prefix is avoided. This only requires a regex to find those Links, and a search-and-replace Library to actually transform the pages.\n\nPlugins are not difficult to set up, and this simple plugin opens the\nway for more advanced customization. Plugins in Quartz fall into 3 categories\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlugin TypeFunctionalityExemplary Use-CaseTransformerAlter or enrich each file by manipulating text, AST or resourcesRender latex or create wordcountFilterDecide which file gets publishedSkip draftsEmitterProduce final output (override default here)Custom layout\nWe will use a transformer:\nimport { QuartzTransformerPlugin } from &quot;../types&quot;\nimport { findAndReplace } from &quot;mdast-util-find-and-replace&quot;\nimport { Text } from &quot;mdast&quot;\n \ninterface Options {\n  prefix: string\n}\n \nexport const StripPrefixLinks: QuartzTransformerPlugin&lt;Options&gt; = (opts?: Options) =&gt; {\n  const prefix = opts?.prefix ?? &quot;&quot;\n \n  return {\n    name: &quot;StripPrefixLinks&quot;,\n    markdownPlugins() {\n      return [\n        () =&gt; {\n          return (tree) =&gt; {\n            const pattern = new RegExp(`\\\\[\\\\[${prefix}/([^\\\\]]+?)\\\\]\\\\]`, &quot;g&quot;)\n \n            findAndReplace(tree, [\n              [\n                pattern,\n                (_match: string, captured: string) =&gt;\n                  ({ type: &quot;text&quot;, value: `[[${captured}]]` } as Text),\n              ],\n            ])\n          }\n        },\n      ]\n    },\n  }\n}\n \nWe will place this at .github/Quartz/Quartz/plugins/transformers/stripPrefixLinks.ts.\nNow, we’ll have to register the Plugin at ... /plugins/transformers/index.ts by adding the Line\nexport { StripPrefixLinks } from &quot;./stripPrefixLinks.ts&quot;\nNow, we enable the plugin in the config .github/Quartz/Quartz.config.ts, by adding it in front of the other transformer plugins:\n//...\nplugins: {\n    transformers: [\n      Plugin.StripPrefixLinks({ prefix: &quot;Blog&quot; }),\n      //...\n    ]\n}, //...\nIf you want to setup the Blog elsewhere in your Obsidian vault, also modify the prefix here.\nCustom footer\nTo create a custom footer, edit .github/quartz/quartz/components/Footer.tsx. If you just want to add custom links (like to your social media) to the footer, you can change those in .github/quartz/quartz/quartz.layout.tsx."},"Paradoxes-and-Limits":{"slug":"Paradoxes-and-Limits","filePath":"Paradoxes and Limits.md","title":"Paradoxes and Limits","links":[],"tags":["Math"],"content":"Mathematics is full of puzzles that appear contradictory at first sight. Often, the resolution comes from taking a closer look at how limits work. Limits are subtle: rules that apply to finite sums, finite shapes, or finite processes often change once we let the number of steps go to infinity. This shift is where paradoxes arise, two of which a covered in this post.\nZeno’s Turtle\nThe Greek philosopher Zeno of Elea is famous for formulating paradoxes that challenge our intuition about motion and infinity. His most iconic thought experiment imagines Achilles chasing a turtle. Even though Achilles runs faster, Zeno argues he can never catch the turtle: by the time Achilles reaches where the turtle was, the turtle has moved a little further ahead, and so on, ad infinitum.\nFormally, we can write Achilles’ path as a geometric series.\nSuppose Achilles runs ten times faster than the turtle, and the turtle has a head start of distance d. The sequence of distances Achilles runs to reach the turtle’s successive positions is:\nd, \\tfrac{d}{10},\\; \\tfrac{d}{100},\\; \\tfrac{d}{1000}, \\ldots\nThis is an infinite sum:\nS = d + \\frac{d}{10} + \\frac{d}{100} + \\frac{d}{1000} + \\cdots\nAt first glance, it seems Achilles must complete infinitely many tasks, therefore he will never reach the turtle. But the infinite series has a finite limit:\nS = \\sum_{k=0}^{\\infty} \\frac{d}{10^k} = \\frac{d}{1 - \\tfrac{1}{10}} = \\frac{10}{9} d.\nAchilles needs to run only a finite distance, slightly larger than d, to overtake the turtle. This is intuitive: The larger the speed-ratio of the both, the smaller the distance. The paradox dissolves once we accept that an infinite process can converge to a finite outcome.\nAn Attempt at the Squaring of the Circle\nJumping from ancient paradoxes to modern misadventures, we find another famous impossibility: squaring the circle. The goal is to construct, with straightedge and compass alone, a square with the same area as a given circle. For centuries, mathematicians tried and failed, until the problem was finally settled in the 19th century.\nThe Indiana PI Bill and its Misassumptions\nOne of the more curious episodes is the story of Edward J. Goodwin, an amateur mathematician from Indiana. In 1897 he proposed a bill to the Indiana legislature, attempting to legislate a new value of \\pi by redefining certain geometric constructions. The bill passed the House before it was quietly buried in the Senate, saved by the intervention of a visiting Purdue professor.\nOne version of Goodwin’s claim concerned the diagonal of a square. If a square has side length a, its diagonal is \\sqrt{2} \\cdot a. Goodwin’s proposition effectively assumed that ratios involving \\sqrt{2} could be expressed using only rational relations, which is false.\nWe can formalize this idea by looking at length as a functional: assigning to each geometric object its length. However, this functional is not continuous in the sense Goodwin required. The staircase approximation to a diagonal illustrates this point vividly:\n\nEach staircase has length equal to the sum of its horizontal and vertical steps, always greater than the diagonal. Yet as the steps become finer, the staircase visually converges to the diagonal. The paradox is that the length functional does not behave continuously under this limiting process.\nLength can be expressed as a map from the Set of continuous functions f : \\Bbb R \\to \\Bbb R^2 to the \\Bbb R. This map assigns each of these functions the length of their graph.\nL : C^1(\\Bbb R, \\Bbb R^2) \\to \\Bbb R, f \\mapsto L(f)\nFrom the example above, we can conclude that L itself is not continuous, because the sequence of staircase-functions f_n does converge (uniformly) against the diagonal f, but\nL(\\lim_{n \\to \\infty} f_n) = L(f)  = \\sqrt{2} \\cdot \\alpha \\neq 2 \\cdot \\alpha = \\lim_{n \\to \\infty} L(f_n).\nThis is a counter-example to the limit-version of continuity.\nGoodwin’s error was to assume some statement to hold for an approximation of the circle. Even though the approximation’s error is arbitrarily small, his statement cant be applied to circle (the limit).\nThe irrationality of PI\nTo fully understand why squaring the circle is impossible, we must confront the nature of \\pi.\nOne classical proof of \\pi’s irrationality (due to Lambert1, 1768) uses continued fractions for the tangent function. He showed that \\tan x has an infinite continued fraction expansion, and from this it follows that if \\pi/4 were rational, then \\tan(\\pi/4)=1 could not be represented correctly. This contradiction implies \\pi is irrational.\nModern proofs refine and extend these arguments, some even proving that \\pi is transcendental (not the root of any polynomial with integer coefficients).\nSince straightedge-and-compass constructions can only generate numbers obtained through a finite sequence of rational operations and square roots, constructing a square with area exactly equal to a circle’s area would require \\pi to be algebraic. But \\pi is transcendental. Thus, the ancient dream of squaring the circle is not just difficult, it is mathematically impossible.\nFootnotes\n\n\nkconrad.math.uconn.edu/blurbs/analysis/irrational.pdf ↩\n\n\n"},"index":{"slug":"index","filePath":"index.md","title":"Home","links":["Hello-World"],"tags":[],"content":"Welcome to my Blog.\nThis is very much WIP. Check out my first post: Hello World\nComputer-generated / artificial Content\nwill be marked accordingly, if used used at all."}}